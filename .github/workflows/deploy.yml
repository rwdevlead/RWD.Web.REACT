name: Test, Scan & Deploy Monorepo to Vercel

on:
  push:
    branches:
      - main
      - feature/** # deploy previews for feature branches
  workflow_dispatch:

jobs:
  vercel_deploy:
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    outputs:
      deploy_url: ${{ steps.vercel_deploy.outputs.deploy_url }}
      deploy_status: ${{ steps.vercel_deploy.outputs.deploy_status }}
    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      # 3Ô∏è‚É£ Install root dependencies
      - name: Install dependencies
        run: npm install

      # 4Ô∏è‚É£ Run backend tests
      - name: Run workspace tests
        run: npm run test
        working-directory: test/backend

      # 5Ô∏è‚É£ Security scans
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

      # 6Ô∏è‚É£ Install Vercel CLI
      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      # 7Ô∏è‚É£ Sync secrets (Prod + Preview)
      - name: Sync environment variables to Vercel
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Syncing Production Secrets ..."
            vercel env rm VITE_RECAPTCHA_SITE_KEY production --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.VITE_RECAPTCHA_SITE_KEY }} | vercel env add VITE_RECAPTCHA_SITE_KEY production --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_ACCESSTOKEN production --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.EMAILJS_ACCESSTOKEN }} | vercel env add EMAILJS_ACCESSTOKEN production --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_PUBLICKEY production --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.EMAILJS_PUBLICKEY }} | vercel env add EMAILJS_PUBLICKEY production --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_SERVICE_ID production --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.EMAILJS_SERVICE_ID }} | vercel env add EMAILJS_SERVICE_ID production --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_CU_TEMPLATE_ID production --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.EMAILJS_CU_TEMPLATE_ID }} | vercel env add EMAILJS_CU_TEMPLATE_ID production --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_URL production --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ vars.EMAILJS_URL }} | vercel env add EMAILJS_URL production --token=${{ secrets.VERCEL_TOKEN }}
          else
            echo "Syncing Preview Secrets ..."
            vercel env rm VITE_RECAPTCHA_SITE_KEY preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.VITE_RECAPTCHA_SITE_KEY }} | vercel env add VITE_RECAPTCHA_SITE_KEY preview --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_ACCESSTOKEN preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.EMAILJS_ACCESSTOKEN }} | vercel env add EMAILJS_ACCESSTOKEN preview --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_PUBLICKEY preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.EMAILJS_PUBLICKEY }} | vercel env add EMAILJS_PUBLICKEY preview --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_SERVICE_ID preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.EMAILJS_SERVICE_ID }} | vercel env add EMAILJS_SERVICE_ID preview --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_CU_TEMPLATE_ID preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ secrets.EMAILJS_CU_TEMPLATE_ID }} | vercel env add EMAILJS_CU_TEMPLATE_ID preview --token=${{ secrets.VERCEL_TOKEN }}

            vercel env rm EMAILJS_URL preview --yes --token=${{ secrets.VERCEL_TOKEN }} || true
            echo ${{ vars.EMAILJS_URL }} | vercel env add EMAILJS_URL preview --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # 8Ô∏è‚É£ Deploy step
      - name: Deploy to Vercel
        id: vercel_deploy
        run: |
          set -e
          DEPLOY_EXIT=0
          DEPLOY_URL=""

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Deploying to Production..."
            vercel pull --yes --environment=production --token="${{ secrets.VERCEL_TOKEN }}"
            vercel build --prod --token="${{ secrets.VERCEL_TOKEN }}"
            DEPLOY_OUTPUT=$(vercel deploy --prebuilt --prod --token="${{ secrets.VERCEL_TOKEN }}" 2>&1) || DEPLOY_EXIT=$?
          else
            echo "Deploying to Preview..."
            vercel pull --yes --environment=preview --token="${{ secrets.VERCEL_TOKEN }}"
            vercel build --token="${{ secrets.VERCEL_TOKEN }}"
            DEPLOY_OUTPUT=$(vercel deploy --prebuilt --token="${{ secrets.VERCEL_TOKEN }}" 2>&1) || DEPLOY_EXIT=$?
          fi

          echo "$DEPLOY_OUTPUT"

          # Extract deploy URL from Vercel output (last HTTP(s) link)
          # Grab the Inspect URL from Vercel CLI output
          DEPLOY_URL=$(echo "$DEPLOY_OUTPUT" | grep '^Inspect:' | awk '{print $2}' || true)

          # Set outputs for GitHub Actions
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          if [[ $DEPLOY_EXIT -eq 0 && -n "$DEPLOY_URL" ]]; then
            echo "deploy_status=success" >> $GITHUB_OUTPUT
          else
            echo "deploy_status=failure" >> $GITHUB_OUTPUT
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  notify:
    needs: vercel_deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send notification via EmailJS
        run: |
          echo "Vercel deploy_url from vercel_deploy job: '${{ needs.vercel_deploy.outputs.deploy_url }}'"

          # GitHub job result
          GH_STATUS="${{ needs.vercel_deploy.result }}"

          # Vercel outputs
          DEPLOY_STATUS="${{ needs.vercel_deploy.outputs.deploy_status }}"
          DEPLOY_URL="${{ needs.vercel_deploy.outputs.deploy_url }}"

          # Compose link message
          if [ -n "$DEPLOY_URL" ]; then
            LINK_MSG="<br>üåê <a href='$DEPLOY_URL'>View Vercel Deployment</a>"
          else
            LINK_MSG=""
          fi

          GH_LINK_MSG="<br>üêô <a href='${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'>View GitHub Workflow</a>"

          # Choose the right emoji for each status
          GH_EMOJI=$( [[ "$GH_STATUS" == "success" ]] && echo "‚úÖ" || echo "‚ùå" )
          DEPLOY_EMOJI=$( [[ "$DEPLOY_STATUS" == "success" ]] && echo "‚úÖ" || echo "‚ùå" )

          # Build the HTML message
          MESSAGE="<b>GitHub Action:</b> ${{ github.workflow }}<br>\
          <b>Repository:</b> ${{ github.repository }}<br>\
          <b>Branch:</b> ${{ github.ref_name }}<br><br>\
          <b>GitHub Job:</b> $GH_EMOJI <b>$GH_STATUS</b> $GH_LINK_MSG<br>\
          <b>Vercel Deploy:</b> $DEPLOY_EMOJI <b>$DEPLOY_STATUS</b> $LINK_MSG"

          echo "MESSAGE: $MESSAGE"

          curl -X POST https://api.emailjs.com/api/v1.0/email/send \
            -H 'Content-Type: application/json' \
            -d "{
              \"service_id\": \"${{ secrets.EMAILJS_SERVICE_ID }}\",
              \"template_id\": \"${{ secrets.EMAILJS_AR_TEMPLATE_ID }}\",
              \"user_id\": \"${{ secrets.EMAILJS_PUBLICKEY }}\",
              \"accessToken\": \"${{ secrets.EMAILJS_ACCESSTOKEN }}\",
              \"template_params\": {
                \"to_email\": \"${{ secrets.RWD_EMAIL_TO }}\",
                \"subject\": \"üöÄ Vercel Deploy $STATUS\",
                \"message\": \"$MESSAGE\"
              }
            }"
